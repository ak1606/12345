public class Queue {
    private static final int MAX_SIZE = 1000; // Adjust the maximum size as needed
    private int front, rear, size;
    private int[] array;

    public Queue() {
        this.front = this.size = 0;
        this.rear = -1;
        this.array = new int[MAX_SIZE];
    }

    // Method to enqueue (add) an element to the queue
    public void enqueue(int item) {
        if (size == MAX_SIZE) {
            System.out.println("Queue is full");
            return;
        }
        rear = (rear + 1) % MAX_SIZE;
        array[rear] = item;
        size++;
        System.out.println(item + " enqueued to queue");
    }

    // Method to dequeue (remove) an element from the queue
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return -1; // or throw an exception for an empty queue
        }
        int item = array[front];
        front = (front + 1) % MAX_SIZE;
        size--;
        return item;
    }

    // Method to peek the front element of the queue without removing it
    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return -1; // or throw an exception for an empty queue
        }
        return array[front];
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Method to display the queue elements
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return;
        }
        System.out.print("Queue: ");
        int count = 0;
        int i = front;
        while (count < size) {
            System.out.print(array[i] + " ");
            i = (i + 1) % MAX_SIZE;
            count++;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Queue queue = new Queue();

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        queue.display();

        System.out.println("Dequeued element: " + queue.dequeue());

        queue.display();
    }
}
