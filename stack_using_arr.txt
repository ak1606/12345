public class Stack {
    private static final int MAX_SIZE = 1000; // Adjust the maximum size as needed
    private int top;
    private int[] array;

    public Stack() {
        this.top = -1;
        this.array = new int[MAX_SIZE];
    }

    // Method to push an element onto the stack
    public void push(int item) {
        if (top >= MAX_SIZE - 1) {
            System.out.println("Stack Overflow");
            return;
        }
        array[++top] = item;
        System.out.println(item + " pushed to stack");
    }

    // Method to pop an element from the stack
    public int pop() {
        if (top < 0) {
            System.out.println("Stack Underflow");
            return -1; // or throw an exception for underflow
        }
        int item = array[top--];
        return item;
    }

    // Method to peek the top element of the stack without removing it
    public int peek() {
        if (top < 0) {
            System.out.println("Stack is empty");
            return -1; // or throw an exception for an empty stack
        }
        return array[top];
    }

    // Method to check if the stack is empty
    public boolean isEmpty() {
        return top < 0;
    }

    // Method to display the stack elements
    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty");
            return;
        }
        System.out.print("Stack: ");
        for (int i = 0; i <= top; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Stack stack = new Stack();

        stack.push(10);
        stack.push(20);
        stack.push(30);

        stack.display();

        System.out.println("Top element: " + stack.peek());

        System.out.println("Popped element: " + stack.pop());

        stack.display();
    }
}
